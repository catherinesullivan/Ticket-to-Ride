#BlueJ class context
comment0.params=
comment0.target=Tracks()
comment0.text=\r\n\ Constructor\ for\ all\ Tracks.\r\n\ Adds\ the\ offset\ to\ all\ of\ the\ points\ which\ are\ added\r\n\ in\ a\ static\ intializer\ block.\r\n
comment1.params=
comment1.target=void\ unAddOffSet()
comment1.text=\r\n\ Goes\ through\ and\ unadds\ the\ offset\ to\ all\ of\ the\ tracks.\r\n
comment10.params=t\ playerColor\ city
comment10.target=int\ longestPathFromTrack(Track,\ java.awt.Color,\ java.lang.String)
comment10.text=\r\n\ Algorithm\ for\ finding\ the\ longest\ path\ from\r\n\ the\ particular\ track\ t\r\n\ @param\ t\ -\ current\ track\ in\ question\r\n\ @param\ playerColor\ -\ the\ players\ color\r\n\ @param\ city\ -\ the\ city\ that\ the\ player\ came\ from\r\n\ @return\ length\ of\ the\ longest\ \r\n\ path\ from\ the\ particular\ track\r\n
comment11.params=track\ playerColor\ city
comment11.target=java.util.ArrayList\ getAdjTrack(Track,\ java.awt.Color,\ java.lang.String)
comment11.text=\r\n\ Returns\ an\ ArrayList\ of\ all\ of\ the\ Tracks\ \r\n\ linked\ to\ the\ particular\ city\ if\r\n\ that\ player\ holds\ that\ particular\ Track\r\n\ \r\n\ @param\ t\ -\ Track\ to\ find\ adjacent\ Tracks\ to\r\n\ @param\ playerColor\ -\ the\ color\ of\ the\ player\r\n\ @param\ city\ -\ City\ the\ person\ is\ coming\ from\r\n\ @return\ all\ Tracks\ connecting\ to\ that\ city\r\n
comment2.params=bg
comment2.target=void\ drawPlayerTracks(java.awt.Graphics)
comment2.text=\r\n\ Goes\ through\ and\ draws\ all\ of\ the\ player\ owned\ tracks\r\n\ @param\ bg\ -\ Buffered\ Graphics\ to\ draw\ tracks\r\n
comment3.params=p
comment3.target=Track\ trackClicked(java.awt.Point)
comment3.text=\r\n\ Determines\ what\ Track\ you\ clicked\ on\ or\ null\ if\ \r\n\ none\ was\ clicked.\r\n\ @param\ p\ the\ point\ clicked\r\n\ @return\ boolean\ true\ if\ you\ clicked\ this\ Track\ and\ false\r\n\ otherwise\r\n
comment4.params=hover\ player
comment4.target=Track\ trackOver(java.awt.Point,\ Player)
comment4.text=\r\n\ Returns\ the\ track\ only\ if\ the\ player\ can\ purchase\ it\r\n\ and\ if\ the\ track\ is\ occupied\ then\ the\ player\ has\ the\r\n\ right\ of\ way\ card\ and\ the\ mouse\ is\ hovering\ over\ it.\r\n\ \r\n\ @param\ hover-\ the\ coordinates\ of\ the\ point\ in\ question\r\n\ @param\ player\ -\ the\ player\ whose\ turn\ it\ is\r\n\ @return\ Track\ -\ the\ track\ object\ that\ was\ being\ hovered\r\n\ over\ or\ null\ if\ one\ doesn't\ exist\ or\ the\ player\ cannot\r\n\ purchase\ it\r\n
comment5.params=city1\ city2\ playerColor
comment5.target=boolean\ isPath(java.lang.String,\ java.lang.String,\ java.awt.Color)
comment5.text=\r\n\ Determines\ if\ there\ is\ a\ path\ from\ city\ 1\ to\ city\ 2.\r\n\ \r\n\ @param\ city1\ -\ name\ of\ second\ city\r\n\ @param\ city2\ -\ name\ of\ first\ city\r\n\ @param\ playerColor\ color\ of\ player\r\n\ @return\ true\ if\ the\ player\ has\ a\ path\ from\ city1\ to\ city\ 2\r\n\ false\ otherwise\r\n
comment6.params=city\ playerColor
comment6.target=java.util.ArrayList\ getTracks(java.lang.String,\ java.awt.Color)
comment6.text=\r\n\ Returns\ the\ list\ of\ tracks\ from\ the\ starting\ city\ that\ the\r\n\ player\ has.\r\n\ @param\ city\ -\ city\ name\ of\ Track\ we\ are\ looking\ for\r\n\ @return\ ArrayList<Track>\ -\ the\ Track\ that\ contains\ the\ city\r\n
comment7.params=
comment7.target=void\ markUnvisited()
comment7.text=\r\n\ Marks\ all\ Tracks\ as\ not\ being\ visited\r\n
comment8.params=t\ city\ playerColor
comment8.target=boolean\ dfs(Track,\ java.lang.String,\ java.awt.Color)
comment8.text=\r\n\ Performs\ a\ depth\ first\ search\ on\ the\ current\ Track\r\n\ and\ returns\ true\ if\ it\ connects\ to\ the\ second\ city\r\n\ @param\ t\ -\ current\ track\ looking\ at\r\n\ @param\ city\ -\ city's\ name\ you're\ looking\ for\r\n\ @param\ playerColor\ -\ the\ color\ of\ the\ player\r\n\ @return\ true\ if\ there\ is\ a\ path\ to\ that\ city\ \r\n\ or\ false\ otherwise\r\n
comment9.params=p
comment9.target=int\ longestPath(Player)
comment9.text=\r\n\ Determines\ the\ longest\ path\ length\r\n
numComments=12
